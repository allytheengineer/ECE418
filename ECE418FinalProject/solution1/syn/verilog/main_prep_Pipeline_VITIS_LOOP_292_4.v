// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_prep_Pipeline_VITIS_LOOP_292_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        messageSchedule_address0,
        messageSchedule_ce0,
        messageSchedule_we0,
        messageSchedule_d0,
        messageSchedule_q0,
        messageSchedule_address1,
        messageSchedule_ce1,
        messageSchedule_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] messageSchedule_address0;
output   messageSchedule_ce0;
output   messageSchedule_we0;
output  [31:0] messageSchedule_d0;
input  [31:0] messageSchedule_q0;
output  [5:0] messageSchedule_address1;
output   messageSchedule_ce1;
input  [31:0] messageSchedule_q1;

reg ap_idle;
reg[5:0] messageSchedule_address0;
reg messageSchedule_ce0;
reg messageSchedule_we0;
reg[5:0] messageSchedule_address1;
reg messageSchedule_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln292_reg_365;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] i_2_reg_360;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_2_reg_360_pp0_iter1_reg;
wire   [0:0] icmp_ln292_fu_131_p2;
wire   [5:0] empty_31_fu_137_p1;
reg   [5:0] empty_31_reg_369;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] add_ln296_3_fu_334_p2;
reg   [31:0] add_ln296_3_reg_395;
reg   [31:0] messageSchedule_load_2_reg_400;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] messageSchedule_load_3_reg_405;
wire   [31:0] add_ln296_4_fu_344_p2;
reg   [31:0] add_ln296_4_reg_410;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln293_fu_147_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln294_fu_158_p1;
wire   [63:0] zext_ln296_fu_319_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln296_1_fu_329_p1;
wire   [63:0] i_2_cast13_fu_349_p1;
wire    ap_block_pp0_stage2;
reg   [6:0] i_fu_70;
wire   [6:0] add_ln292_fu_163_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire   [5:0] add_ln293_fu_141_p2;
wire   [5:0] add_ln294_fu_152_p2;
wire   [6:0] trunc_ln261_fu_184_p1;
wire   [24:0] lshr_ln_fu_174_p4;
wire   [17:0] trunc_ln261_6_fu_206_p1;
wire   [13:0] lshr_ln261_1_fu_196_p4;
wire   [28:0] lshr_ln1_fu_218_p4;
wire   [31:0] zext_ln293_1_fu_228_p1;
wire   [31:0] or_ln261_1_fu_210_p3;
wire   [31:0] xor_ln293_fu_232_p2;
wire   [31:0] or_ln_fu_188_p3;
wire   [16:0] trunc_ln261_7_fu_254_p1;
wire   [14:0] lshr_ln261_2_fu_244_p4;
wire   [18:0] trunc_ln261_8_fu_276_p1;
wire   [12:0] lshr_ln261_3_fu_266_p4;
wire   [21:0] lshr_ln2_fu_288_p4;
wire   [31:0] zext_ln294_1_fu_298_p1;
wire   [31:0] or_ln261_3_fu_280_p3;
wire   [31:0] xor_ln294_fu_302_p2;
wire   [31:0] or_ln261_2_fu_258_p3;
wire   [5:0] add_ln296_fu_314_p2;
wire   [5:0] add_ln296_1_fu_324_p2;
wire   [31:0] s0_fu_238_p2;
wire   [31:0] s1_fu_308_p2;
wire   [31:0] add_ln296_2_fu_340_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln292_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= add_ln292_fu_163_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 7'd16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_reg_365 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln296_3_reg_395 <= add_ln296_3_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln296_4_reg_410 <= add_ln296_4_fu_344_p2;
        i_2_reg_360 <= ap_sig_allocacmp_i_2;
        i_2_reg_360_pp0_iter1_reg <= i_2_reg_360;
        icmp_ln292_reg_365 <= icmp_ln292_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_31_reg_369 <= empty_31_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_reg_365 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        messageSchedule_load_2_reg_400 <= messageSchedule_q1;
        messageSchedule_load_3_reg_405 <= messageSchedule_q0;
    end
end

always @ (*) begin
    if (((icmp_ln292_reg_365 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd16;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        messageSchedule_address0 = i_2_cast13_fu_349_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        messageSchedule_address0 = zext_ln296_1_fu_329_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        messageSchedule_address0 = zext_ln294_fu_158_p1;
    end else begin
        messageSchedule_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            messageSchedule_address1 = zext_ln296_fu_319_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            messageSchedule_address1 = zext_ln293_fu_147_p1;
        end else begin
            messageSchedule_address1 = 'bx;
        end
    end else begin
        messageSchedule_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        messageSchedule_ce0 = 1'b1;
    end else begin
        messageSchedule_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        messageSchedule_ce1 = 1'b1;
    end else begin
        messageSchedule_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        messageSchedule_we0 = 1'b1;
    end else begin
        messageSchedule_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln292_fu_163_p2 = (ap_sig_allocacmp_i_2 + 7'd1);

assign add_ln293_fu_141_p2 = ($signed(empty_31_fu_137_p1) + $signed(6'd49));

assign add_ln294_fu_152_p2 = ($signed(empty_31_fu_137_p1) + $signed(6'd62));

assign add_ln296_1_fu_324_p2 = ($signed(empty_31_reg_369) + $signed(6'd57));

assign add_ln296_2_fu_340_p2 = (messageSchedule_load_2_reg_400 + messageSchedule_load_3_reg_405);

assign add_ln296_3_fu_334_p2 = (s0_fu_238_p2 + s1_fu_308_p2);

assign add_ln296_4_fu_344_p2 = (add_ln296_3_reg_395 + add_ln296_2_fu_340_p2);

assign add_ln296_fu_314_p2 = ($signed(empty_31_reg_369) + $signed(6'd48));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign empty_31_fu_137_p1 = ap_sig_allocacmp_i_2[5:0];

assign i_2_cast13_fu_349_p1 = i_2_reg_360_pp0_iter1_reg;

assign icmp_ln292_fu_131_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_218_p4 = {{messageSchedule_q1[31:3]}};

assign lshr_ln261_1_fu_196_p4 = {{messageSchedule_q1[31:18]}};

assign lshr_ln261_2_fu_244_p4 = {{messageSchedule_q0[31:17]}};

assign lshr_ln261_3_fu_266_p4 = {{messageSchedule_q0[31:19]}};

assign lshr_ln2_fu_288_p4 = {{messageSchedule_q0[31:10]}};

assign lshr_ln_fu_174_p4 = {{messageSchedule_q1[31:7]}};

assign messageSchedule_d0 = add_ln296_4_reg_410;

assign or_ln261_1_fu_210_p3 = {{trunc_ln261_6_fu_206_p1}, {lshr_ln261_1_fu_196_p4}};

assign or_ln261_2_fu_258_p3 = {{trunc_ln261_7_fu_254_p1}, {lshr_ln261_2_fu_244_p4}};

assign or_ln261_3_fu_280_p3 = {{trunc_ln261_8_fu_276_p1}, {lshr_ln261_3_fu_266_p4}};

assign or_ln_fu_188_p3 = {{trunc_ln261_fu_184_p1}, {lshr_ln_fu_174_p4}};

assign s0_fu_238_p2 = (xor_ln293_fu_232_p2 ^ or_ln_fu_188_p3);

assign s1_fu_308_p2 = (xor_ln294_fu_302_p2 ^ or_ln261_2_fu_258_p3);

assign trunc_ln261_6_fu_206_p1 = messageSchedule_q1[17:0];

assign trunc_ln261_7_fu_254_p1 = messageSchedule_q0[16:0];

assign trunc_ln261_8_fu_276_p1 = messageSchedule_q0[18:0];

assign trunc_ln261_fu_184_p1 = messageSchedule_q1[6:0];

assign xor_ln293_fu_232_p2 = (zext_ln293_1_fu_228_p1 ^ or_ln261_1_fu_210_p3);

assign xor_ln294_fu_302_p2 = (zext_ln294_1_fu_298_p1 ^ or_ln261_3_fu_280_p3);

assign zext_ln293_1_fu_228_p1 = lshr_ln1_fu_218_p4;

assign zext_ln293_fu_147_p1 = add_ln293_fu_141_p2;

assign zext_ln294_1_fu_298_p1 = lshr_ln2_fu_288_p4;

assign zext_ln294_fu_158_p1 = add_ln294_fu_152_p2;

assign zext_ln296_1_fu_329_p1 = add_ln296_1_fu_324_p2;

assign zext_ln296_fu_319_p1 = add_ln296_fu_314_p2;

endmodule //main_prep_Pipeline_VITIS_LOOP_292_4
