// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_prep_Pipeline_VITIS_LOOP_334_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty_12,
        empty_13,
        empty_14,
        empty_15,
        empty_16,
        empty_17,
        empty_18,
        empty,
        messageSchedule_address0,
        messageSchedule_ce0,
        messageSchedule_q0,
        add186789_i_out,
        add186789_i_out_ap_vld,
        z_assign_1_out,
        z_assign_1_out_ap_vld,
        y_assign_1_out,
        y_assign_1_out_ap_vld,
        x_assign_3_out,
        x_assign_3_out_ap_vld,
        add172345_i_out,
        add172345_i_out_ap_vld,
        z_assign_out,
        z_assign_out_ap_vld,
        y_assign_out,
        y_assign_out_ap_vld,
        x_assign_2_out,
        x_assign_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] empty_12;
input  [31:0] empty_13;
input  [31:0] empty_14;
input  [31:0] empty_15;
input  [31:0] empty_16;
input  [31:0] empty_17;
input  [31:0] empty_18;
input  [31:0] empty;
output  [5:0] messageSchedule_address0;
output   messageSchedule_ce0;
input  [31:0] messageSchedule_q0;
output  [31:0] add186789_i_out;
output   add186789_i_out_ap_vld;
output  [31:0] z_assign_1_out;
output   z_assign_1_out_ap_vld;
output  [31:0] y_assign_1_out;
output   y_assign_1_out_ap_vld;
output  [31:0] x_assign_3_out;
output   x_assign_3_out_ap_vld;
output  [31:0] add172345_i_out;
output   add172345_i_out_ap_vld;
output  [31:0] z_assign_out;
output   z_assign_out_ap_vld;
output  [31:0] y_assign_out;
output   y_assign_out_ap_vld;
output  [31:0] x_assign_2_out;
output   x_assign_2_out_ap_vld;

reg ap_idle;
reg messageSchedule_ce0;
reg add186789_i_out_ap_vld;
reg z_assign_1_out_ap_vld;
reg y_assign_1_out_ap_vld;
reg x_assign_3_out_ap_vld;
reg add172345_i_out_ap_vld;
reg z_assign_out_ap_vld;
reg y_assign_out_ap_vld;
reg x_assign_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln334_fu_318_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] constants_address0;
reg    constants_ce0;
wire   [31:0] constants_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln334_reg_731;
reg   [0:0] icmp_ln334_reg_731_pp0_iter1_reg;
reg   [0:0] icmp_ln334_reg_731_pp0_iter2_reg;
reg   [0:0] icmp_ln334_reg_731_pp0_iter3_reg;
reg   [31:0] constants_load_reg_745;
reg   [31:0] messageSchedule_load_reg_750;
wire   [31:0] add_ln337_2_fu_348_p2;
reg   [31:0] add_ln337_2_reg_755;
reg   [31:0] x_assign_2_load_reg_760;
reg   [31:0] z_assign_load_reg_765;
wire   [31:0] temp1_fu_471_p2;
reg   [31:0] temp1_reg_770;
wire   [63:0] i_3_cast_fu_330_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] y_assign_fu_104;
wire    ap_loop_init;
reg   [31:0] add172345_i_fu_108;
reg   [31:0] ap_sig_allocacmp_add172345_i_load;
reg   [31:0] y_assign_1_fu_112;
reg   [31:0] add186789_i_fu_116;
reg   [6:0] i_fu_120;
wire   [6:0] add_ln334_fu_324_p2;
reg   [6:0] ap_sig_allocacmp_i_1;
reg   [31:0] x_assign_2_fu_124;
wire   [31:0] add_ln344_fu_607_p2;
reg   [31:0] ap_sig_allocacmp_x_assign_2_load;
reg   [31:0] z_assign_fu_128;
reg   [31:0] x_assign_3_fu_132;
wire   [31:0] add_ln348_fu_617_p2;
reg   [31:0] z_assign_1_fu_136;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln337_fu_344_p2;
wire   [5:0] trunc_ln261_fu_373_p1;
wire   [25:0] lshr_ln261_4_fu_363_p4;
wire   [10:0] trunc_ln261_1_fu_395_p1;
wire   [20:0] lshr_ln261_5_fu_385_p4;
wire   [24:0] trunc_ln261_2_fu_417_p1;
wire   [6:0] lshr_ln261_6_fu_407_p4;
wire   [31:0] or_ln261_4_fu_377_p3;
wire   [31:0] or_ln261_5_fu_399_p3;
wire   [31:0] xor_ln335_fu_429_p2;
wire   [31:0] or_ln261_6_fu_421_p3;
wire   [31:0] xor_ln303_fu_447_p2;
wire   [31:0] and_ln303_fu_441_p2;
wire   [31:0] and_ln303_1_fu_453_p2;
wire   [31:0] ch_fu_459_p2;
wire   [31:0] S1_fu_435_p2;
wire   [31:0] add_ln337_1_fu_465_p2;
wire   [1:0] trunc_ln261_3_fu_515_p1;
wire   [29:0] lshr_ln261_7_fu_505_p4;
wire   [12:0] trunc_ln261_4_fu_537_p1;
wire   [18:0] lshr_ln261_8_fu_527_p4;
wire   [21:0] trunc_ln261_5_fu_559_p1;
wire   [9:0] lshr_ln261_9_fu_549_p4;
wire   [31:0] or_ln261_7_fu_519_p3;
wire   [31:0] or_ln261_8_fu_541_p3;
wire   [31:0] xor_ln338_fu_571_p2;
wire   [31:0] or_ln261_9_fu_563_p3;
wire   [31:0] xor_ln307_fu_583_p2;
wire   [31:0] and_ln307_fu_589_p2;
wire   [31:0] and_ln307_1_fu_595_p2;
wire   [31:0] maj_fu_601_p2;
wire   [31:0] add_ln348_1_fu_612_p2;
wire   [31:0] S0_fu_577_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_prep_Pipeline_VITIS_LOOP_334_1_constants_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
constants_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(constants_address0),
    .ce0(constants_ce0),
    .q0(constants_q0)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add172345_i_fu_108 <= empty_16;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln334_reg_731_pp0_iter2_reg == 1'd0))) begin
            add172345_i_fu_108 <= z_assign_fu_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add186789_i_fu_116 <= empty_12;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
            add186789_i_fu_116 <= z_assign_1_fu_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln334_fu_318_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_120 <= add_ln334_fu_324_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            x_assign_2_fu_124 <= empty;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
            x_assign_2_fu_124 <= add_ln344_fu_607_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            x_assign_3_fu_132 <= empty_15;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
            x_assign_3_fu_132 <= add_ln348_fu_617_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            y_assign_1_fu_112 <= empty_14;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
            y_assign_1_fu_112 <= x_assign_3_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            y_assign_fu_104 <= empty_18;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln334_reg_731_pp0_iter2_reg == 1'd0))) begin
            y_assign_fu_104 <= ap_sig_allocacmp_x_assign_2_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            z_assign_1_fu_136 <= empty_13;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
            z_assign_1_fu_136 <= y_assign_1_fu_112;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            z_assign_fu_128 <= empty_17;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln334_reg_731_pp0_iter2_reg == 1'd0))) begin
            z_assign_fu_128 <= y_assign_fu_104;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter1_reg == 1'd0))) begin
        add_ln337_2_reg_755 <= add_ln337_2_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln334_reg_731 <= icmp_ln334_fu_318_p2;
        icmp_ln334_reg_731_pp0_iter1_reg <= icmp_ln334_reg_731;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln334_reg_731_pp0_iter2_reg <= icmp_ln334_reg_731_pp0_iter1_reg;
        icmp_ln334_reg_731_pp0_iter3_reg <= icmp_ln334_reg_731_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln334_reg_731 == 1'd0))) begin
        constants_load_reg_745 <= constants_q0;
        messageSchedule_load_reg_750 <= messageSchedule_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter2_reg == 1'd0))) begin
        temp1_reg_770 <= temp1_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        x_assign_2_load_reg_760 <= ap_sig_allocacmp_x_assign_2_load;
        z_assign_load_reg_765 <= z_assign_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        add172345_i_out_ap_vld = 1'b1;
    end else begin
        add172345_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        add186789_i_out_ap_vld = 1'b1;
    end else begin
        add186789_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln334_fu_318_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln334_reg_731_pp0_iter2_reg == 1'd0))) begin
        ap_sig_allocacmp_add172345_i_load = z_assign_fu_128;
    end else begin
        ap_sig_allocacmp_add172345_i_load = add172345_i_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd0))) begin
        ap_sig_allocacmp_x_assign_2_load = add_ln344_fu_607_p2;
    end else begin
        ap_sig_allocacmp_x_assign_2_load = x_assign_2_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        constants_ce0 = 1'b1;
    end else begin
        constants_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        messageSchedule_ce0 = 1'b1;
    end else begin
        messageSchedule_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        x_assign_2_out_ap_vld = 1'b1;
    end else begin
        x_assign_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        x_assign_3_out_ap_vld = 1'b1;
    end else begin
        x_assign_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        y_assign_1_out_ap_vld = 1'b1;
    end else begin
        y_assign_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        y_assign_out_ap_vld = 1'b1;
    end else begin
        y_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        z_assign_1_out_ap_vld = 1'b1;
    end else begin
        z_assign_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln334_reg_731_pp0_iter3_reg == 1'd1))) begin
        z_assign_out_ap_vld = 1'b1;
    end else begin
        z_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S0_fu_577_p2 = (xor_ln338_fu_571_p2 ^ or_ln261_9_fu_563_p3);

assign S1_fu_435_p2 = (xor_ln335_fu_429_p2 ^ or_ln261_6_fu_421_p3);

assign add172345_i_out = add172345_i_fu_108;

assign add186789_i_out = add186789_i_fu_116;

assign add_ln334_fu_324_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign add_ln337_1_fu_465_p2 = (ch_fu_459_p2 + S1_fu_435_p2);

assign add_ln337_2_fu_348_p2 = (add_ln337_fu_344_p2 + ap_sig_allocacmp_add172345_i_load);

assign add_ln337_fu_344_p2 = (messageSchedule_load_reg_750 + constants_load_reg_745);

assign add_ln344_fu_607_p2 = (temp1_reg_770 + add186789_i_fu_116);

assign add_ln348_1_fu_612_p2 = (temp1_reg_770 + maj_fu_601_p2);

assign add_ln348_fu_617_p2 = (add_ln348_1_fu_612_p2 + S0_fu_577_p2);

assign and_ln303_1_fu_453_p2 = (z_assign_fu_128 & xor_ln303_fu_447_p2);

assign and_ln303_fu_441_p2 = (y_assign_fu_104 & ap_sig_allocacmp_x_assign_2_load);

assign and_ln307_1_fu_595_p2 = (z_assign_1_fu_136 & y_assign_1_fu_112);

assign and_ln307_fu_589_p2 = (xor_ln307_fu_583_p2 & x_assign_3_fu_132);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ch_fu_459_p2 = (and_ln303_fu_441_p2 ^ and_ln303_1_fu_453_p2);

assign constants_address0 = i_3_cast_fu_330_p1;

assign i_3_cast_fu_330_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln334_fu_318_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln261_4_fu_363_p4 = {{ap_sig_allocacmp_x_assign_2_load[31:6]}};

assign lshr_ln261_5_fu_385_p4 = {{ap_sig_allocacmp_x_assign_2_load[31:11]}};

assign lshr_ln261_6_fu_407_p4 = {{ap_sig_allocacmp_x_assign_2_load[31:25]}};

assign lshr_ln261_7_fu_505_p4 = {{x_assign_3_fu_132[31:2]}};

assign lshr_ln261_8_fu_527_p4 = {{x_assign_3_fu_132[31:13]}};

assign lshr_ln261_9_fu_549_p4 = {{x_assign_3_fu_132[31:22]}};

assign maj_fu_601_p2 = (and_ln307_fu_589_p2 ^ and_ln307_1_fu_595_p2);

assign messageSchedule_address0 = i_3_cast_fu_330_p1;

assign or_ln261_4_fu_377_p3 = {{trunc_ln261_fu_373_p1}, {lshr_ln261_4_fu_363_p4}};

assign or_ln261_5_fu_399_p3 = {{trunc_ln261_1_fu_395_p1}, {lshr_ln261_5_fu_385_p4}};

assign or_ln261_6_fu_421_p3 = {{trunc_ln261_2_fu_417_p1}, {lshr_ln261_6_fu_407_p4}};

assign or_ln261_7_fu_519_p3 = {{trunc_ln261_3_fu_515_p1}, {lshr_ln261_7_fu_505_p4}};

assign or_ln261_8_fu_541_p3 = {{trunc_ln261_4_fu_537_p1}, {lshr_ln261_8_fu_527_p4}};

assign or_ln261_9_fu_563_p3 = {{trunc_ln261_5_fu_559_p1}, {lshr_ln261_9_fu_549_p4}};

assign temp1_fu_471_p2 = (add_ln337_2_reg_755 + add_ln337_1_fu_465_p2);

assign trunc_ln261_1_fu_395_p1 = ap_sig_allocacmp_x_assign_2_load[10:0];

assign trunc_ln261_2_fu_417_p1 = ap_sig_allocacmp_x_assign_2_load[24:0];

assign trunc_ln261_3_fu_515_p1 = x_assign_3_fu_132[1:0];

assign trunc_ln261_4_fu_537_p1 = x_assign_3_fu_132[12:0];

assign trunc_ln261_5_fu_559_p1 = x_assign_3_fu_132[21:0];

assign trunc_ln261_fu_373_p1 = ap_sig_allocacmp_x_assign_2_load[5:0];

assign x_assign_2_out = x_assign_2_load_reg_760;

assign x_assign_3_out = x_assign_3_fu_132;

assign xor_ln303_fu_447_p2 = (ap_sig_allocacmp_x_assign_2_load ^ 32'd4294967295);

assign xor_ln307_fu_583_p2 = (z_assign_1_fu_136 ^ y_assign_1_fu_112);

assign xor_ln335_fu_429_p2 = (or_ln261_5_fu_399_p3 ^ or_ln261_4_fu_377_p3);

assign xor_ln338_fu_571_p2 = (or_ln261_8_fu_541_p3 ^ or_ln261_7_fu_519_p3);

assign y_assign_1_out = y_assign_1_fu_112;

assign y_assign_out = y_assign_fu_104;

assign z_assign_1_out = z_assign_1_fu_136;

assign z_assign_out = z_assign_load_reg_765;

endmodule //main_prep_Pipeline_VITIS_LOOP_334_1
