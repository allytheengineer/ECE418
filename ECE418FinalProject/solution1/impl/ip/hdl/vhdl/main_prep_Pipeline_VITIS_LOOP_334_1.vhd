-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_prep_Pipeline_VITIS_LOOP_334_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    messageSchedule_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    messageSchedule_ce0 : OUT STD_LOGIC;
    messageSchedule_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    add186789_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add186789_i_out_ap_vld : OUT STD_LOGIC;
    z_assign_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    z_assign_1_out_ap_vld : OUT STD_LOGIC;
    y_assign_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_assign_1_out_ap_vld : OUT STD_LOGIC;
    x_assign_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_assign_3_out_ap_vld : OUT STD_LOGIC;
    add172345_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add172345_i_out_ap_vld : OUT STD_LOGIC;
    z_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    z_assign_out_ap_vld : OUT STD_LOGIC;
    y_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_assign_out_ap_vld : OUT STD_LOGIC;
    x_assign_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_assign_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of main_prep_Pipeline_VITIS_LOOP_334_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln334_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal constants_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal constants_ce0 : STD_LOGIC;
    signal constants_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln334_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal constants_load_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal messageSchedule_load_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln337_2_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln337_2_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_load_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_assign_load_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_assign_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal add172345_i_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_add172345_i_load : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal add186789_i_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln334_fu_324_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_assign_2_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln344_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_assign_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal z_assign_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln348_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_assign_1_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln337_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln261_fu_373_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln261_4_fu_363_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln261_1_fu_395_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln261_5_fu_385_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln261_2_fu_417_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln261_6_fu_407_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln261_4_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_5_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln335_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_6_fu_421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln303_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln303_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln303_1_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S1_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln337_1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln261_3_fu_515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln261_7_fu_505_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln261_4_fu_537_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln261_8_fu_527_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln261_5_fu_559_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln261_9_fu_549_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln261_7_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_8_fu_541_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln338_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_9_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln307_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln307_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln307_1_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maj_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln348_1_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S0_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_prep_Pipeline_VITIS_LOOP_334_1_constants_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    constants_U : component main_prep_Pipeline_VITIS_LOOP_334_1_constants_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => constants_address0,
        ce0 => constants_ce0,
        q0 => constants_q0);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    add172345_i_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add172345_i_fu_108 <= empty_16;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter2_reg = ap_const_lv1_0))) then 
                    add172345_i_fu_108 <= z_assign_fu_128;
                end if;
            end if; 
        end if;
    end process;

    add186789_i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add186789_i_fu_116 <= empty_12;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
                    add186789_i_fu_116 <= z_assign_1_fu_136;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln334_fu_318_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_120 <= add_ln334_fu_324_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_120 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    x_assign_2_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_assign_2_fu_124 <= empty;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
                    x_assign_2_fu_124 <= add_ln344_fu_607_p2;
                end if;
            end if; 
        end if;
    end process;

    x_assign_3_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_assign_3_fu_132 <= empty_15;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
                    x_assign_3_fu_132 <= add_ln348_fu_617_p2;
                end if;
            end if; 
        end if;
    end process;

    y_assign_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    y_assign_1_fu_112 <= empty_14;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
                    y_assign_1_fu_112 <= x_assign_3_fu_132;
                end if;
            end if; 
        end if;
    end process;

    y_assign_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    y_assign_fu_104 <= empty_18;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter2_reg = ap_const_lv1_0))) then 
                    y_assign_fu_104 <= ap_sig_allocacmp_x_assign_2_load;
                end if;
            end if; 
        end if;
    end process;

    z_assign_1_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    z_assign_1_fu_136 <= empty_13;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
                    z_assign_1_fu_136 <= y_assign_1_fu_112;
                end if;
            end if; 
        end if;
    end process;

    z_assign_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    z_assign_fu_128 <= empty_17;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter2_reg = ap_const_lv1_0))) then 
                    z_assign_fu_128 <= y_assign_fu_104;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln337_2_reg_755 <= add_ln337_2_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln334_reg_731 <= icmp_ln334_fu_318_p2;
                icmp_ln334_reg_731_pp0_iter1_reg <= icmp_ln334_reg_731;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln334_reg_731_pp0_iter2_reg <= icmp_ln334_reg_731_pp0_iter1_reg;
                icmp_ln334_reg_731_pp0_iter3_reg <= icmp_ln334_reg_731_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln334_reg_731 = ap_const_lv1_0))) then
                constants_load_reg_745 <= constants_q0;
                messageSchedule_load_reg_750 <= messageSchedule_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter2_reg = ap_const_lv1_0))) then
                temp1_reg_770 <= temp1_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                x_assign_2_load_reg_760 <= ap_sig_allocacmp_x_assign_2_load;
                z_assign_load_reg_765 <= z_assign_fu_128;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    S0_fu_577_p2 <= (xor_ln338_fu_571_p2 xor or_ln261_9_fu_563_p3);
    S1_fu_435_p2 <= (xor_ln335_fu_429_p2 xor or_ln261_6_fu_421_p3);
    add172345_i_out <= add172345_i_fu_108;

    add172345_i_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            add172345_i_out_ap_vld <= ap_const_logic_1;
        else 
            add172345_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add186789_i_out <= add186789_i_fu_116;

    add186789_i_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            add186789_i_out_ap_vld <= ap_const_logic_1;
        else 
            add186789_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln334_fu_324_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    add_ln337_1_fu_465_p2 <= std_logic_vector(unsigned(ch_fu_459_p2) + unsigned(S1_fu_435_p2));
    add_ln337_2_fu_348_p2 <= std_logic_vector(unsigned(add_ln337_fu_344_p2) + unsigned(ap_sig_allocacmp_add172345_i_load));
    add_ln337_fu_344_p2 <= std_logic_vector(unsigned(messageSchedule_load_reg_750) + unsigned(constants_load_reg_745));
    add_ln344_fu_607_p2 <= std_logic_vector(unsigned(temp1_reg_770) + unsigned(add186789_i_fu_116));
    add_ln348_1_fu_612_p2 <= std_logic_vector(unsigned(temp1_reg_770) + unsigned(maj_fu_601_p2));
    add_ln348_fu_617_p2 <= std_logic_vector(unsigned(add_ln348_1_fu_612_p2) + unsigned(S0_fu_577_p2));
    and_ln303_1_fu_453_p2 <= (z_assign_fu_128 and xor_ln303_fu_447_p2);
    and_ln303_fu_441_p2 <= (y_assign_fu_104 and ap_sig_allocacmp_x_assign_2_load);
    and_ln307_1_fu_595_p2 <= (z_assign_1_fu_136 and y_assign_1_fu_112);
    and_ln307_fu_589_p2 <= (xor_ln307_fu_583_p2 and x_assign_3_fu_132);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln334_fu_318_p2)
    begin
        if (((icmp_ln334_fu_318_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add172345_i_load_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln334_reg_731_pp0_iter2_reg, ap_block_pp0_stage0, add172345_i_fu_108, z_assign_fu_128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_add172345_i_load <= z_assign_fu_128;
        else 
            ap_sig_allocacmp_add172345_i_load <= add172345_i_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_120)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_x_assign_2_load_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln334_reg_731_pp0_iter3_reg, ap_block_pp0_stage0, x_assign_2_fu_124, add_ln344_fu_607_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_x_assign_2_load <= add_ln344_fu_607_p2;
        else 
            ap_sig_allocacmp_x_assign_2_load <= x_assign_2_fu_124;
        end if; 
    end process;

    ch_fu_459_p2 <= (and_ln303_fu_441_p2 xor and_ln303_1_fu_453_p2);
    constants_address0 <= i_3_cast_fu_330_p1(6 - 1 downto 0);

    constants_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            constants_ce0 <= ap_const_logic_1;
        else 
            constants_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln334_fu_318_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_40) else "0";
    lshr_ln261_4_fu_363_p4 <= ap_sig_allocacmp_x_assign_2_load(31 downto 6);
    lshr_ln261_5_fu_385_p4 <= ap_sig_allocacmp_x_assign_2_load(31 downto 11);
    lshr_ln261_6_fu_407_p4 <= ap_sig_allocacmp_x_assign_2_load(31 downto 25);
    lshr_ln261_7_fu_505_p4 <= x_assign_3_fu_132(31 downto 2);
    lshr_ln261_8_fu_527_p4 <= x_assign_3_fu_132(31 downto 13);
    lshr_ln261_9_fu_549_p4 <= x_assign_3_fu_132(31 downto 22);
    maj_fu_601_p2 <= (and_ln307_fu_589_p2 xor and_ln307_1_fu_595_p2);
    messageSchedule_address0 <= i_3_cast_fu_330_p1(6 - 1 downto 0);

    messageSchedule_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            messageSchedule_ce0 <= ap_const_logic_1;
        else 
            messageSchedule_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln261_4_fu_377_p3 <= (trunc_ln261_fu_373_p1 & lshr_ln261_4_fu_363_p4);
    or_ln261_5_fu_399_p3 <= (trunc_ln261_1_fu_395_p1 & lshr_ln261_5_fu_385_p4);
    or_ln261_6_fu_421_p3 <= (trunc_ln261_2_fu_417_p1 & lshr_ln261_6_fu_407_p4);
    or_ln261_7_fu_519_p3 <= (trunc_ln261_3_fu_515_p1 & lshr_ln261_7_fu_505_p4);
    or_ln261_8_fu_541_p3 <= (trunc_ln261_4_fu_537_p1 & lshr_ln261_8_fu_527_p4);
    or_ln261_9_fu_563_p3 <= (trunc_ln261_5_fu_559_p1 & lshr_ln261_9_fu_549_p4);
    temp1_fu_471_p2 <= std_logic_vector(unsigned(add_ln337_2_reg_755) + unsigned(add_ln337_1_fu_465_p2));
    trunc_ln261_1_fu_395_p1 <= ap_sig_allocacmp_x_assign_2_load(11 - 1 downto 0);
    trunc_ln261_2_fu_417_p1 <= ap_sig_allocacmp_x_assign_2_load(25 - 1 downto 0);
    trunc_ln261_3_fu_515_p1 <= x_assign_3_fu_132(2 - 1 downto 0);
    trunc_ln261_4_fu_537_p1 <= x_assign_3_fu_132(13 - 1 downto 0);
    trunc_ln261_5_fu_559_p1 <= x_assign_3_fu_132(22 - 1 downto 0);
    trunc_ln261_fu_373_p1 <= ap_sig_allocacmp_x_assign_2_load(6 - 1 downto 0);
    x_assign_2_out <= x_assign_2_load_reg_760;

    x_assign_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_assign_2_out_ap_vld <= ap_const_logic_1;
        else 
            x_assign_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_3_out <= x_assign_3_fu_132;

    x_assign_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_assign_3_out_ap_vld <= ap_const_logic_1;
        else 
            x_assign_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln303_fu_447_p2 <= (ap_sig_allocacmp_x_assign_2_load xor ap_const_lv32_FFFFFFFF);
    xor_ln307_fu_583_p2 <= (z_assign_1_fu_136 xor y_assign_1_fu_112);
    xor_ln335_fu_429_p2 <= (or_ln261_5_fu_399_p3 xor or_ln261_4_fu_377_p3);
    xor_ln338_fu_571_p2 <= (or_ln261_8_fu_541_p3 xor or_ln261_7_fu_519_p3);
    y_assign_1_out <= y_assign_1_fu_112;

    y_assign_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            y_assign_1_out_ap_vld <= ap_const_logic_1;
        else 
            y_assign_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_assign_out <= y_assign_fu_104;

    y_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            y_assign_out_ap_vld <= ap_const_logic_1;
        else 
            y_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    z_assign_1_out <= z_assign_1_fu_136;

    z_assign_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            z_assign_1_out_ap_vld <= ap_const_logic_1;
        else 
            z_assign_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    z_assign_out <= z_assign_load_reg_765;

    z_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln334_reg_731_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln334_reg_731_pp0_iter3_reg = ap_const_lv1_1))) then 
            z_assign_out_ap_vld <= ap_const_logic_1;
        else 
            z_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
