-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_prep_Pipeline_VITIS_LOOP_292_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    messageSchedule_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    messageSchedule_ce0 : OUT STD_LOGIC;
    messageSchedule_we0 : OUT STD_LOGIC;
    messageSchedule_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    messageSchedule_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    messageSchedule_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    messageSchedule_ce1 : OUT STD_LOGIC;
    messageSchedule_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of main_prep_Pipeline_VITIS_LOOP_292_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln292_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_2_reg_360 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_360_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln292_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_137_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_26_reg_369 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln296_3_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_3_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal messageSchedule_load_2_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal messageSchedule_load_3_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_4_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_4_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln293_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln294_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln296_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln296_1_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast13_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal i_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln292_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln293_fu_141_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln294_fu_152_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln261_fu_184_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_fu_174_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln261_6_fu_206_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln261_1_fu_196_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln1_fu_218_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln293_1_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_1_fu_210_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln293_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln261_7_fu_254_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln261_2_fu_244_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln261_8_fu_276_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln261_3_fu_266_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln2_fu_288_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln294_1_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_3_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln294_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln261_2_fu_258_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_fu_314_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln296_1_fu_324_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal s0_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln296_2_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln292_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_70 <= add_ln292_fu_163_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv7_10;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_reg_365 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln296_3_reg_395 <= add_ln296_3_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln296_4_reg_410 <= add_ln296_4_fu_344_p2;
                i_2_reg_360 <= ap_sig_allocacmp_i_2;
                i_2_reg_360_pp0_iter1_reg <= i_2_reg_360;
                icmp_ln292_reg_365 <= icmp_ln292_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_fu_131_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_26_reg_369 <= empty_26_fu_137_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_reg_365 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                messageSchedule_load_2_reg_400 <= messageSchedule_q1;
                messageSchedule_load_3_reg_405 <= messageSchedule_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln292_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv7_1));
    add_ln293_fu_141_p2 <= std_logic_vector(unsigned(empty_26_fu_137_p1) + unsigned(ap_const_lv6_31));
    add_ln294_fu_152_p2 <= std_logic_vector(unsigned(empty_26_fu_137_p1) + unsigned(ap_const_lv6_3E));
    add_ln296_1_fu_324_p2 <= std_logic_vector(unsigned(empty_26_reg_369) + unsigned(ap_const_lv6_39));
    add_ln296_2_fu_340_p2 <= std_logic_vector(unsigned(messageSchedule_load_2_reg_400) + unsigned(messageSchedule_load_3_reg_405));
    add_ln296_3_fu_334_p2 <= std_logic_vector(unsigned(s0_fu_238_p2) + unsigned(s1_fu_308_p2));
    add_ln296_4_fu_344_p2 <= std_logic_vector(unsigned(add_ln296_3_reg_395) + unsigned(add_ln296_2_fu_340_p2));
    add_ln296_fu_314_p2 <= std_logic_vector(unsigned(empty_26_reg_369) + unsigned(ap_const_lv6_30));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln292_reg_365)
    begin
        if (((icmp_ln292_reg_365 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv7_10;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_70;
        end if; 
    end process;

    empty_26_fu_137_p1 <= ap_sig_allocacmp_i_2(6 - 1 downto 0);
    i_2_cast13_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_360_pp0_iter1_reg),64));
    icmp_ln292_fu_131_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv7_40) else "0";
    lshr_ln1_fu_218_p4 <= messageSchedule_q1(31 downto 3);
    lshr_ln261_1_fu_196_p4 <= messageSchedule_q1(31 downto 18);
    lshr_ln261_2_fu_244_p4 <= messageSchedule_q0(31 downto 17);
    lshr_ln261_3_fu_266_p4 <= messageSchedule_q0(31 downto 19);
    lshr_ln2_fu_288_p4 <= messageSchedule_q0(31 downto 10);
    lshr_ln_fu_174_p4 <= messageSchedule_q1(31 downto 7);

    messageSchedule_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln294_fu_158_p1, ap_block_pp0_stage1, zext_ln296_1_fu_329_p1, i_2_cast13_fu_349_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            messageSchedule_address0 <= i_2_cast13_fu_349_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            messageSchedule_address0 <= zext_ln296_1_fu_329_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            messageSchedule_address0 <= zext_ln294_fu_158_p1(6 - 1 downto 0);
        else 
            messageSchedule_address0 <= "XXXXXX";
        end if; 
    end process;


    messageSchedule_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln293_fu_147_p1, ap_block_pp0_stage0, zext_ln296_fu_319_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                messageSchedule_address1 <= zext_ln296_fu_319_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                messageSchedule_address1 <= zext_ln293_fu_147_p1(6 - 1 downto 0);
            else 
                messageSchedule_address1 <= "XXXXXX";
            end if;
        else 
            messageSchedule_address1 <= "XXXXXX";
        end if; 
    end process;


    messageSchedule_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            messageSchedule_ce0 <= ap_const_logic_1;
        else 
            messageSchedule_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    messageSchedule_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            messageSchedule_ce1 <= ap_const_logic_1;
        else 
            messageSchedule_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    messageSchedule_d0 <= add_ln296_4_reg_410;

    messageSchedule_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            messageSchedule_we0 <= ap_const_logic_1;
        else 
            messageSchedule_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln261_1_fu_210_p3 <= (trunc_ln261_6_fu_206_p1 & lshr_ln261_1_fu_196_p4);
    or_ln261_2_fu_258_p3 <= (trunc_ln261_7_fu_254_p1 & lshr_ln261_2_fu_244_p4);
    or_ln261_3_fu_280_p3 <= (trunc_ln261_8_fu_276_p1 & lshr_ln261_3_fu_266_p4);
    or_ln_fu_188_p3 <= (trunc_ln261_fu_184_p1 & lshr_ln_fu_174_p4);
    s0_fu_238_p2 <= (xor_ln293_fu_232_p2 xor or_ln_fu_188_p3);
    s1_fu_308_p2 <= (xor_ln294_fu_302_p2 xor or_ln261_2_fu_258_p3);
    trunc_ln261_6_fu_206_p1 <= messageSchedule_q1(18 - 1 downto 0);
    trunc_ln261_7_fu_254_p1 <= messageSchedule_q0(17 - 1 downto 0);
    trunc_ln261_8_fu_276_p1 <= messageSchedule_q0(19 - 1 downto 0);
    trunc_ln261_fu_184_p1 <= messageSchedule_q1(7 - 1 downto 0);
    xor_ln293_fu_232_p2 <= (zext_ln293_1_fu_228_p1 xor or_ln261_1_fu_210_p3);
    xor_ln294_fu_302_p2 <= (zext_ln294_1_fu_298_p1 xor or_ln261_3_fu_280_p3);
    zext_ln293_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_218_p4),32));
    zext_ln293_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln293_fu_141_p2),64));
    zext_ln294_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_288_p4),32));
    zext_ln294_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln294_fu_152_p2),64));
    zext_ln296_1_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln296_1_fu_324_p2),64));
    zext_ln296_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln296_fu_314_p2),64));
end behav;
