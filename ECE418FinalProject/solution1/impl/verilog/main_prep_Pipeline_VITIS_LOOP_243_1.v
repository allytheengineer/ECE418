// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_prep_Pipeline_VITIS_LOOP_243_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        splitBlock_address0,
        splitBlock_ce0,
        splitBlock_q0,
        val_out,
        val_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] splitBlock_address0;
output   splitBlock_ce0;
input  [4:0] splitBlock_q0;
output  [31:0] val_out;
output   val_out_ap_vld;

reg ap_idle;
reg splitBlock_ce0;
reg val_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] icmp_ln243_fu_72_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] idx_load_reg_141;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [63:0] zext_ln241_fu_67_p1;
reg   [31:0] idx_fu_26;
wire   [31:0] add_ln253_fu_78_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_idx_load;
reg   [31:0] val_fu_30;
wire   [31:0] val_2_fu_104_p3;
wire   [31:0] val_1_fu_86_p2;
wire   [0:0] icmp_ln248_fu_92_p2;
wire   [31:0] or_ln250_fu_98_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx_fu_26 <= 32'd0;
    end else if (((icmp_ln243_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_26 <= add_ln253_fu_78_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        val_fu_30 <= 32'd0;
    end else if (((icmp_ln243_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_fu_30 <= val_2_fu_104_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx_load_reg_141 <= ap_sig_allocacmp_idx_load;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln243_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx_load = 32'd0;
    end else begin
        ap_sig_allocacmp_idx_load = idx_fu_26;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        splitBlock_ce0 = 1'b1;
    end else begin
        splitBlock_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln243_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        val_out_ap_vld = 1'b1;
    end else begin
        val_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln253_fu_78_p2 = (idx_load_reg_141 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln243_fu_72_p2 = ((splitBlock_q0 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln248_fu_92_p2 = ((splitBlock_q0 == 5'd17) ? 1'b1 : 1'b0);

assign or_ln250_fu_98_p2 = (val_1_fu_86_p2 | 32'd1);

assign splitBlock_address0 = zext_ln241_fu_67_p1;

assign val_1_fu_86_p2 = val_fu_30 << 32'd1;

assign val_2_fu_104_p3 = ((icmp_ln248_fu_92_p2[0:0] == 1'b1) ? or_ln250_fu_98_p2 : val_1_fu_86_p2);

assign val_out = val_fu_30;

assign zext_ln241_fu_67_p1 = ap_sig_allocacmp_idx_load;

endmodule //main_prep_Pipeline_VITIS_LOOP_243_1
