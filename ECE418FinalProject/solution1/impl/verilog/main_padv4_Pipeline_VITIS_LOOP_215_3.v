// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module main_padv4_Pipeline_VITIS_LOOP_215_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        messageBlocks_address0,
        messageBlocks_ce0,
        messageBlocks_we0,
        messageBlocks_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] messageBlocks_address0;
output   messageBlocks_ce0;
output   messageBlocks_we0;
output  [4:0] messageBlocks_d0;

reg ap_idle;
reg messageBlocks_ce0;
reg messageBlocks_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln215_fu_140_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] iter_1_fu_82_p2;
reg   [31:0] iter_1_reg_230;
wire    ap_block_pp0_stage0_11001;
wire   [16:0] select_ln215_fu_128_p3;
reg   [16:0] select_ln215_reg_235;
wire   [6:0] select_ln216_fu_182_p3;
reg   [6:0] select_ln216_reg_244;
wire   [16:0] add_ln216_2_fu_210_p2;
reg   [16:0] add_ln216_2_reg_250;
wire   [63:0] zext_ln216_2_fu_219_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] iter_fu_52;
reg   [31:0] ap_sig_allocacmp_iter_load;
wire    ap_loop_init;
wire   [8:0] trunc_ln215_fu_96_p1;
wire   [8:0] empty_fu_78_p1;
wire   [8:0] xor_ln215_fu_108_p2;
wire   [16:0] p_and_t3_cast_fu_114_p3;
wire   [0:0] tmp_fu_88_p3;
wire   [16:0] sub_ln215_fu_122_p2;
wire   [16:0] p_and_f_cast_fu_100_p3;
wire   [9:0] trunc_ln215_1_fu_136_p1;
wire   [15:0] empty_37_fu_146_p1;
wire   [6:0] trunc_ln216_1_fu_156_p4;
wire   [15:0] add_ln208_1_fu_150_p2;
wire   [6:0] add_ln216_fu_166_p2;
wire   [6:0] trunc_ln216_2_fu_172_p4;
wire   [15:0] tmp_s_fu_193_p3;
wire   [16:0] zext_ln216_1_fu_200_p1;
wire   [16:0] zext_ln216_fu_190_p1;
wire   [16:0] add_ln216_1_fu_204_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            iter_fu_52 <= 32'd24;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            iter_fu_52 <= iter_1_reg_230;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln216_2_reg_250 <= add_ln216_2_fu_210_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        iter_1_reg_230 <= iter_1_fu_82_p2;
        select_ln215_reg_235 <= select_ln215_fu_128_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln215_fu_140_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln216_reg_244 <= select_ln216_fu_182_p3;
    end
end

always @ (*) begin
    if (((icmp_ln215_fu_140_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_iter_load = 32'd24;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_iter_load = iter_1_reg_230;
        end else begin
            ap_sig_allocacmp_iter_load = iter_fu_52;
        end
    end else begin
        ap_sig_allocacmp_iter_load = iter_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        messageBlocks_ce0 = 1'b1;
    end else begin
        messageBlocks_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        messageBlocks_we0 = 1'b1;
    end else begin
        messageBlocks_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln208_1_fu_150_p2 = (empty_37_fu_146_p1 + 16'd1);

assign add_ln216_1_fu_204_p2 = (zext_ln216_1_fu_200_p1 + zext_ln216_fu_190_p1);

assign add_ln216_2_fu_210_p2 = (add_ln216_1_fu_204_p2 + select_ln215_reg_235);

assign add_ln216_fu_166_p2 = (trunc_ln216_1_fu_156_p4 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_37_fu_146_p1 = ap_sig_allocacmp_iter_load[15:0];

assign empty_fu_78_p1 = ap_sig_allocacmp_iter_load[8:0];

assign icmp_ln215_fu_140_p2 = ((trunc_ln215_1_fu_136_p1 == 10'd447) ? 1'b1 : 1'b0);

assign iter_1_fu_82_p2 = (ap_sig_allocacmp_iter_load + 32'd1);

assign messageBlocks_address0 = zext_ln216_2_fu_219_p1;

assign messageBlocks_d0 = 5'd16;

assign p_and_f_cast_fu_100_p3 = {{8'd0}, {trunc_ln215_fu_96_p1}};

assign p_and_t3_cast_fu_114_p3 = {{8'd0}, {xor_ln215_fu_108_p2}};

assign select_ln215_fu_128_p3 = ((tmp_fu_88_p3[0:0] == 1'b1) ? sub_ln215_fu_122_p2 : p_and_f_cast_fu_100_p3);

assign select_ln216_fu_182_p3 = ((tmp_fu_88_p3[0:0] == 1'b1) ? add_ln216_fu_166_p2 : trunc_ln216_2_fu_172_p4);

assign sub_ln215_fu_122_p2 = (17'd0 - p_and_t3_cast_fu_114_p3);

assign tmp_fu_88_p3 = iter_1_fu_82_p2[32'd31];

assign tmp_s_fu_193_p3 = {{select_ln216_reg_244}, {9'd0}};

assign trunc_ln215_1_fu_136_p1 = select_ln215_fu_128_p3[9:0];

assign trunc_ln215_fu_96_p1 = iter_1_fu_82_p2[8:0];

assign trunc_ln216_1_fu_156_p4 = {{ap_sig_allocacmp_iter_load[15:9]}};

assign trunc_ln216_2_fu_172_p4 = {{add_ln208_1_fu_150_p2[15:9]}};

assign xor_ln215_fu_108_p2 = (empty_fu_78_p1 ^ 9'd511);

assign zext_ln216_1_fu_200_p1 = tmp_s_fu_193_p3;

assign zext_ln216_2_fu_219_p1 = add_ln216_2_reg_250;

assign zext_ln216_fu_190_p1 = select_ln216_reg_244;

endmodule //main_padv4_Pipeline_VITIS_LOOP_215_3
